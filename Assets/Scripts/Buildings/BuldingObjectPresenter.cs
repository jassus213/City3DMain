using System;using System.Linq;using Buildings;using UnityEngine;using Zenject;[Serializable]public class BuldingObjectPresenter : IBuildingObjectPresenter, ITickable, IInitializable{    // UNDONE Class is not finish    private LayerMask _groundLayer = LayerMask.GetMask("House", "Ground");    private readonly SignalBus _signalBus;    private readonly MouseState _mouseState;    private readonly InputState _inputState;    private IBuildingObjectView _buildingObjectView;    public BuldingObjectPresenter(IBuildingObjectView buildingObjectView, SignalBus signalBus, MouseState mouseState,        InputState inputState)    {        _buildingObjectView = buildingObjectView;        _signalBus = signalBus;        _mouseState = mouseState;        _inputState = inputState;    }    private RaycastHit? RaycastHitInfo()    {        var ray = Camera.main.ScreenPointToRay(_mouseState.MousePosition);        if (Physics.Raycast(ray, out UnityEngine.RaycastHit hitInfo))            return hitInfo;        return null;    }    private bool IsBuildingNull()    {        var building = _buildingObjectView.GetBuilding();        if (building is null)            return true;        return false;    }    public void Tick()    {        if (IsBuildingNull())        {            var hitInfo = RaycastHitInfo();            if (_mouseState.IsLeftClick)            {                if (hitInfo.Value.transform.gameObject.GetComponent<IMovable>() is not null)                {                    _buildingObjectView.SetFlyingBuilding(hitInfo.Value);                    return;                }            }        }        if (!IsBuildingNull())        {            var ray = RaycastHitInfo();            if (ray is not null)            {                var x = Mathf.RoundToInt(ray.Value.point.x);                var z = Mathf.RoundToInt(ray.Value.point.y);                var position = new Vector3(x, ray.Value.point.y, z);                _buildingObjectView.SetPosition(position);            }            if (_mouseState.IsLeftClick)                _buildingObjectView.SetRotataion();        }    }    public bool IsGroundDetected()    {        var building = _buildingObjectView.GetBuilding();        var renderList = building.GetComponentsInChildren<MeshRenderer>(true).ToList();        var bounds = renderList[0].bounds;        for (int i = 1; i < renderList.Count; i++)        {            bounds.Encapsulate(renderList[i].bounds);        }        var result = Physics.BoxCast(bounds.center + 100f * Vector3.up,            bounds.extents + 0.1f * Vector3.right + 0.1f * Vector3.forward,            Vector3.down, out var hit, Quaternion.identity, 2000f, _groundLayer);        if (!result)            return false;        if (hit.transform.gameObject.layer != 6)        {            //var objectSize = Vector3.Scale(transform.localScale, bounds.size);            var position = building.transform.position;            position = new Vector3(position.x, position.y + bounds.size.y, position.z);            _buildingObjectView.SetPosition(position);            return false;        }        return result;    }    public void Initialize()    {        _buildingObjectView.SetPresenter(this);        _signalBus.Subscribe<GameSceneSignals.StartPlaceBuilding>(StartPlace);    }    private void StartPlace(GameSceneSignals.StartPlaceBuilding building)    {        _buildingObjectView.StartPlaceBuilding(building.Building);    }}