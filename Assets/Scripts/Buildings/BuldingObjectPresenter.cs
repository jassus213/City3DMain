using Buildings.Interfaces;using System.Linq;using UnityEngine;using Zenject;public class BuldingObjectPresenter : IBuildingObjectPresenter, ITickable, IInitializable{    // UNDONE Class is not finish    private LayerMask _groundLayer = LayerMask.GetMask("House", "Ground");    private readonly SignalBus _signalBus;    private IBuildingObjectView _buildingObjectView;    public BuldingObjectPresenter(IBuildingObjectView buildingObjectView, SignalBus signalBus)    {        _buildingObjectView = buildingObjectView;        _signalBus = signalBus;    }    public void Tick()    {    }    public bool IsGroundDetected()    {        var building = _buildingObjectView.GetBuilding();        var renderList = building.GetComponentsInChildren<MeshRenderer>(true).ToList();        var bounds = renderList[0].bounds;        for (int i = 1; i < renderList.Count; i++)        {            bounds.Encapsulate(renderList[i].bounds);        }        var result = Physics.BoxCast(bounds.center + 100f * Vector3.up,            bounds.extents + 0.1f * Vector3.right + 0.1f * Vector3.forward,            Vector3.down, out var hit, Quaternion.identity, 2000f, _groundLayer);        if (!result)            return false;        if (hit.transform.gameObject.layer != 6)        {            //var objectSize = Vector3.Scale(transform.localScale, bounds.size);            var position = building.transform.position;            position = new Vector3(position.x, position.y + bounds.size.y, position.z);            _buildingObjectView.SetPosition(position);            return false;        }        return result;    }    public void Initialize()    {        _buildingObjectView.SetPresenter(this);    }}