using UnityEngine;[RequireComponent(typeof(Renderer), typeof(BoxCollider))]public class BuildingObjectView : MonoBehaviour, IBuildingObjectView, IRotateble, IRemovable{    // UNDONE Class is not finish    [SerializeField] private Renderer _renderer;    [SerializeField] private BoxCollider _boxCollider;    private Building _flyingBuilding;    private IBuildingObjectPresenter _buildingPresenter;    public void SetPresenter(IBuildingObjectPresenter buildingPresenter)    {        _buildingPresenter = buildingPresenter;    }    public void SetRotataion()    {        Rotate();    }    public void StartPlaceBuilding(Building buildingPrefab)    {        if(buildingPrefab is null)            return;        if(_flyingBuilding is not null)            Destroy(_flyingBuilding);        _flyingBuilding = Instantiate(buildingPrefab);    }    public void SetFlyingBuilding(RaycastHit hitInfo)    {        _flyingBuilding = hitInfo.transform.gameObject.GetComponent<Building>();        _flyingBuilding.GetComponent<Collider>().enabled = false;    }    public GameObject GetBuilding()    {        return this.gameObject;    }    public void SetPosition(Vector3 position)    {        transform.position = position;    }    public void SetColor(bool result)    {        if (result)            _renderer.material.color = Color.green;        _renderer.material.color = Color.red;    }    public void DestroyObject()    {        Destroy(this.gameObject);    }    public void Rotate()    {        var rotationOfBuilding = _flyingBuilding.transform.rotation;        var rotationEulers = new Vector3(rotationOfBuilding.x, 90, rotationOfBuilding.z);        _flyingBuilding.transform.Rotate(rotationEulers, Space.World);    }}