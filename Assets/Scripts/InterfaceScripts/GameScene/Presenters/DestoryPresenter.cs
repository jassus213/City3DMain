using System;using Buildings;using UnityEngine;using Zenject;public class DestoryPresenter : IDestoryPresenter, IInitializable, IDisposable{    private readonly SignalBus _signalBus;    private readonly IDestoryView _destoryView;    public DestoryPresenter(IDestoryView destoryView, SignalBus signalBus)    {        _destoryView = destoryView;        _signalBus = signalBus;    }           public void GetGameObject()    {        if (RayCastToGameObject().GetComponent<IRemovable>() != null)        {            Debug.Log(true);            _destoryView.DestroyObject(RayCastToGameObject());        }        Debug.Log(false);    }    public void Initialize()    {        _destoryView.SetPresenter(this);                _signalBus.Subscribe<GameSceneSignals.OnDestoyClick>(OnDestoyGameObject);    }    public void Dispose()    {        _signalBus.Unsubscribe<GameSceneSignals.OnDestoyClick>(OnDestoyGameObject);    }    private GameObject RayCastToGameObject()    {        var ray = Camera.main.ScreenPointToRay(Input.mousePosition);                Physics.Raycast(ray, out RaycastHit hitInfo);        return hitInfo.transform.gameObject;     }    private void OnDestoyGameObject(GameSceneSignals.OnDestoyClick obj)    {        GetGameObject();    }}