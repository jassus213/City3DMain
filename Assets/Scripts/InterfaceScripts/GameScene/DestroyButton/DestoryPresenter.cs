using Buildings;using UnityEngine;using Zenject;public class DestroyPresenter : IDestroyPresenter, IInitializable, ITickable{    private readonly SignalBus _signalBus;    private readonly IDestoryView _destoryView;    private readonly MouseState _mouseState;    private readonly InputState _inputState;    private bool _isActive = false;    public DestroyPresenter(IDestoryView destoryView, SignalBus signalBus, MouseState mouseState, InputState inputState)    {        _destoryView = destoryView;        _signalBus = signalBus;        _mouseState = mouseState;        _inputState = inputState;    }    private void GetGameObject()    {        var gameObject = RayCastToGameObject().GetComponent<IRemovable>();        if (gameObject != null)        {            gameObject.DestroyObject();        }    }    public void Initialize()    {        _destoryView.SetPresenter(this);    }    private GameObject RayCastToGameObject()    {        var ray = Camera.main.ScreenPointToRay(_mouseState.MousePosition);        Physics.Raycast(ray, out RaycastHit hitInfo);        Debug.Log(hitInfo.transform.gameObject.layer);        return hitInfo.transform.gameObject;    }    public void StartDestroyMode()    {        _isActive = !_isActive;    }    public void Tick()    {        Debug.Log(_isActive);                if (!_isActive)            return;        if (_mouseState.IsRightClick)        {            GetGameObject();        }        if (_inputState.IsEscClick)            _isActive = false;    }}